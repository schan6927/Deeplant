{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"b4ddd31fc8124863bc5d81c303976024":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7e64e9f0724c4e9c957604349704087a","IPY_MODEL_eb6a1f34279d4fd5a08444f83d1fb08a","IPY_MODEL_c669489d919140b59e504c0f02246d79"],"layout":"IPY_MODEL_77f3627fd6c946cb9dc6f1432437f0e9"}},"7e64e9f0724c4e9c957604349704087a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_31c80c0c09d74db197bdda9e773dd29e","placeholder":"​","style":"IPY_MODEL_aa2e485d5bbc4c02b01fef92e55cc964","value":"Downloading model.safetensors: 100%"}},"eb6a1f34279d4fd5a08444f83d1fb08a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_70905a8b0e804a59ba2b0ff23babfb4e","max":353365756,"min":0,"orientation":"horizontal","style":"IPY_MODEL_da4d1ee1cffe4420ba66de94a40f0123","value":353365756}},"c669489d919140b59e504c0f02246d79":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_019493fdb0c649fca2e880dd8acfbae3","placeholder":"​","style":"IPY_MODEL_39387c7eb4234b89be1859f74de009b8","value":" 353M/353M [00:02&lt;00:00, 120MB/s]"}},"77f3627fd6c946cb9dc6f1432437f0e9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"31c80c0c09d74db197bdda9e773dd29e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"aa2e485d5bbc4c02b01fef92e55cc964":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"70905a8b0e804a59ba2b0ff23babfb4e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"da4d1ee1cffe4420ba66de94a40f0123":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"019493fdb0c649fca2e880dd8acfbae3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"39387c7eb4234b89be1859f74de009b8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4hyGUyjheZ1c","executionInfo":{"status":"ok","timestamp":1689296622102,"user_tz":-540,"elapsed":19959,"user":{"displayName":"강승준","userId":"03066468858378317540"}},"outputId":"d07aa986-e13c-44d9-9c3f-2af0b9afed4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["cd /content/drive/MyDrive/dp/deeplant"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vOF5mXZeecHT","executionInfo":{"status":"ok","timestamp":1689296622103,"user_tz":-540,"elapsed":4,"user":{"displayName":"강승준","userId":"03066468858378317540"}},"outputId":"f8c9c8e7-dca9-47c5-b491-d2414d3c7f9a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/.shortcut-targets-by-id/1fjWczt1Ri5rqXEVYCJEVygNf_HhrXyax/deeplant\n"]}]},{"cell_type":"code","source":["!pip install timm\n","!pip install --upgrade huggingface_hub\n","!pip install einops\n","!pip install mlflow\n","!pip install catboost"],"metadata":{"id":"8gXAPLUvehbx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import pandas as pd\n","import numpy as np\n","import timm\n","import os\n","import gc\n","import mlflow\n","\n","from torch.utils.data import DataLoader, Dataset\n","from torchvision import transforms\n","from torch.optim.lr_scheduler import ReduceLROnPlateau\n","\n","from torch import optim\n","\n","import timm\n","import os\n","import gc\n","\n","from torch import nn\n","from PIL import Image\n","from torch.utils.data import random_split, SubsetRandomSampler\n","from torch.utils.data import DataLoader\n","\n","import sklearn\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","#----------------For Making Model------------------------\n","import torch.nn.functional as F\n","import Scores\n","from catboost import CatBoostRegressor\n","from torchvision.models.feature_extraction import get_graph_node_names, create_feature_extractor\n","\n","\n","\n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","print(device)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"uKGZOfYN7LA5","executionInfo":{"status":"error","timestamp":1689315237305,"user_tz":-540,"elapsed":8004,"user":{"displayName":"강승준","userId":"03066468858378317540"}},"outputId":"faea3c38-b3b9-43a4-9d8f-5889a3ce730f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-23a766ed94c8>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mtimm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mgc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'timm'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["class CreateImageDataset(Dataset):\n","    def __init__(self, labels, img_dir, image_column, input_columns, output_columns, transform=None, target_transform=None):\n","        self.img_dir = img_dir\n","        self.transform = transform\n","        self.target_transform = target_transform\n","        self.img_labels = labels\n","        self.image_column = image_column\n","        self.input_columns = input_columns\n","        self.output_columns = output_columns\n","\n","    def __len__(self):\n","        return len(self.img_labels)\n","\n","    def __getitem__(self, idx):\n","        output_label = torch.tensor(self.img_labels.iloc[idx, self.output_columns], dtype=torch.float32)\n","        input_label = torch.tensor(self.img_labels.iloc[idx, self.input_columns], dtype=torch.float32)\n","\n","        name = self.img_labels.iloc[idx, self.image_column]\n","        img_path = os.path.join(self.img_dir, name)\n","        image = Image.open(img_path)\n","        if self.transform:\n","            image = self.transform(image)\n","        if self.target_transform:\n","            label = self.target_transform(label)\n","\n","        input = {'image':image, 'input_label':input_label}\n","        return input, output_label, name\n"],"metadata":{"id":"Xshs6CQ4exaA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class LastModule(nn.Module):\n","    def __init__(self,params):\n","      super().__init__()\n","      # ( batch , 773 )\n","      input_shape = params['input_shape']\n","      # ( batch , 5 )\n","      output_shape = params['output_shape']\n","      self.fc1 = nn.Linear(input_shape, input_shape *4, bias=True)\n","      self.fc2 = nn.Linear(input_shape*4, input_shape*2, bias=True)\n","      self.fc3 = nn.Linear(input_shape * 2, output_shape, bias=True)\n","      self.dropout = nn.Dropout(0.3)\n","\n","    def forward(self, x):\n","      x = F.gelu(self.fc1(x))\n","      x = self.dropout(F.gelu(self.fc2(x)))\n","      x = F.gelu(self.fc3(x))\n","\n","      return x"],"metadata":{"id":"HJiomCOLJPDO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class VRModel(nn.Module):\n","  def __init__(self,params):\n","    super(VRModel,self).__init__()\n","    num_classes=params['num_classes']\n","    pretrained=params['pretrained']\n","    model_name=params['model_name']\n","    #--------------------vit-----------------------\n","    temp_model = timm.create_model(model_name, pretrained=pretrained, num_classes=num_classes, exportable=True )\n","    features={'norm':'out'}\n","    feature_extractor = create_feature_extractor(temp_model,return_nodes = features)\n","    vmodel = feature_extractor\n","\n","    self.vision_model = vmodel\n","\n","    self.numeric_model = CatBoostRegressor().load_model('catboost_mode.bin')\n","\n","    #output layer\n","    self.lastfc_layer =  LastModule(params)\n","\n","  def forward(self, image, num):\n","\n","    image_output = self.vision_model(image) # [batch, 768]\n","\n","    num_output = self.numeric_model.predict(num) # [batch, 5]\n","    num_output = torch.from_numpy(num_output)\n","\n","    output = torch.cat([image_output, num_output], dim=-1) # [batch, num_classes * 2]\n","    output = self.lastfc_layer(output)\n","\n","    return output\n"," # model = VRModel()\n"," # y=  model.forward()"],"metadata":{"id":"mFlmRPtSLZoD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def regression(model, params):\n","    num_epochs=params['num_epochs']\n","    loss_func=params['loss_func']\n","    optimizer=params['optimizer']\n","    scheduler=params['lr_scheduler']\n","    log_epoch=params['log_epoch']\n","    train_dl=params['train_dl']\n","    val_dl=params['val_dl']\n","    fold=params['fold']\n","    sanity=params['sanity_check']\n","    signature=params['signature']\n","    num_classes=params['num_classes']\n","    columns_name=params['columns_name']\n","\n","    train_loss, val_loss, train_metric, val_metric, r2_list =[], [], [], [], []\n","    best_loss = 0.0\n","    r2_score =0.0\n","\n","    for epoch in tqdm(range(num_epochs)):\n","\n","        #training\n","        model.train()\n","        loss, metric, _ = regression_epoch(model, loss_func, train_dl, epoch, num_classes, columns_name, sanity, optimizer)\n","        train_loss.append(loss)\n","        train_metric.append(metric)\n","        scheduler.step(train_loss[-1])\n","\n","        #validation\n","        model.eval()\n","        with torch.no_grad():\n","            loss, metric, r2_score = regression_epoch(model, loss_func, val_dl, epoch, num_classes, columns_name, sanity)\n","        val_loss.append(loss)\n","        val_metric.append(metric)\n","        r2_list.append(r2_score)\n","\n","        print('The Validation Loss is {} and the validation accuracy is {}'.format(val_loss[-1],val_metric[-1]))\n","        print('The Training Loss is {} and the training accuracy is {}'.format(train_loss[-1],train_metric[-1]))\n","        print('The R2 score(fixed) is {}'.format(r2_score))\n","\n","    return model, train_metric, val_metric, train_loss, val_loss, r2_list\n","\n","\n","# calculate the loss per epochs\n","def regression_epoch(model, loss_func, dataset_dl, epoch, num_classes, columns_name, sanity_check=False, opt=None):\n","    running_loss = 0.0\n","    running_metrics = np.zeros(num_classes)\n","    running_y = None\n","    running_output = None\n","    len_data = len(dataset_dl.sampler)\n","    r2_score =0.0\n","    #-------------결과 저장할 data frame 정의하는 곳-------------\n","    # 여기 바꾸면 아래 validation 저장하는 부분도 바꿔야함.\n","    columns = ['file_name']\n","    for i in range(num_classes):\n","        columns.append('predict ' + columns_name[i])\n","        columns.append('label ' + columns_name[i])\n","    df = pd.DataFrame(columns=columns)\n","    #----------------------------------------------------------\n","\n","    for xb, yb, name_b in tqdm(dataset_dl):\n","        imageb = xb['image'].to(device)\n","        inputb = xb['input_label'].to(device)\n","        yb = yb.to(device)\n","        output = model(imageb,inputb)\n","\n","        #loss 시점 ------------------------------------------------------------\n","        metric_b = np.zeros(num_classes)\n","        total_loss = 0.0\n","\n","        # class가 1개일 때 개별 라벨이 list 형식아니라서 for문을 못 돌림. 그래서 일단 구분함.\n","        if num_classes != 1:\n","            for i in range(num_classes):\n","                loss_b = loss_func(output[:, i], yb[:, i])\n","                total_loss += loss_b\n","                metric_b[i] += loss_b.item()\n","        else:\n","            loss_b = loss_func(output, yb)\n","            total_loss += loss_b\n","            metric_b += loss_b.item()\n","\n","        running_loss += total_loss.item()\n","        #training--------------------------------------------------------------\n","        if opt is not None:\n","          opt.zero_grad()\n","          total_loss.backward()\n","          opt.step()\n","\n","        #valiation-------------------------------------------------------------\n","        if opt is None:\n","          output = output.detach().cpu().numpy()\n","          yb = yb.cpu().numpy()\n","\n","          name_b = list(name_b)\n","          output = list(output)\n","          yb = list(yb)\n","\n","          Scores.wrongAns(output, name_b, num_classes, yb, columns_name)\n","          running_y, running_output, r2_score = Scores.cal_R2(running_y, running_output, yb, output)\n","\n","\n","        #----------------------------------accuracy/loss------------------------\n","        if metric_b is not None:\n","          running_metrics += metric_b\n","\n","        #---------------------------------one batch end------------------------\n","        if sanity_check is True:\n","            break\n","\n","\n","    loss = running_loss / len_data\n","    metric = running_metrics / len_data\n","    return loss, metric, r2_score\n"],"metadata":{"id":"LLAATlIUgF4l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["imagepath = '/content/drive/MyDrive/deeplant/data/train'\n","label_set = pd.read_csv('/content/drive/MyDrive/deeplant/model/raw_csv/train.csv')\n","image_column = 13\n","input_columns = [14,15,16,17]\n","output_columns = [8,9,10,11,12]\n","\n","train_set = label_set.iloc[:1500,output_columns]\n","test_set = label_set.iloc[:1500,output_columns].reset_index()\n","print(train_set)\n","print(test_set)"],"metadata":{"id":"kyI0e_7KDowy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#-----------Define input transform------------\n","transformation = transforms.Compose([\n","transforms.RandomHorizontalFlip(p=0.3),\n","transforms.RandomVerticalFlip(p=0.3),\n","transforms.RandomRotation((-20,20)),\n","transforms.ToTensor(),\n","])\n","#---------------------------------------------------\n","loss_func = nn.MSELoss()\n","train_dataset = CreateImageDataset(train_set, imagepath, image_column, input_columns, output_columns, transform=transformation)\n","test_dataset = CreateImageDataset(test_set, imagepath, image_column, input_columns, output_columns, transform=transformation)\n","\n","model = VRModel(params_model)\n","model = model.to(device)\n","\n","optimizer = optim.Adam(model.parameters(), lr = 1e-5)\n","scheduler = ReduceLROnPlateau(optimizer, patience = 2, factor = 0.5, threshold = 0.003)\n","train_dl = DataLoader(train_dataset, batch_size=16, num_workers=2, pin_memory=True)\n","val_dl = DataLoader(test_dataset, batch_size=16, num_workers=2, pin_memory=True)\n","#----------------------------------------------------"],"metadata":{"id":"GomVf3xNA45I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["params_train = {\n","'num_epochs':30,\n","'optimizer':optimizer,\n","'loss_func':loss_func,\n","'train_dl':train_dl,\n","'val_dl':val_dl,\n","'sanity_check':sanity,\n","'lr_scheduler':scheduler,\n","'log_epoch':log_epoch,\n","'fold':fold,\n","'signature':signature,\n","'num_classes':5,\n","'columns_name':columns_name,\n","}"],"metadata":{"id":"XV0YraiH_-SV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model, train_acc, val_acc, train_loss, val_loss, r2_score = regression(model, params_train)\n","\n","#plot the curves\n","plt.plot(train_acc, label = 'train_acc')\n","plt.plot(val_acc, label = 'val_acc')\n","plt.plot(train_loss, label = 'train_loss')\n","plt.plot(val_loss, label = 'val_loss')\n","plt.legend()\n","plt.title('Accuracy and Loss Plots')\n","figure = plt.gcf()\n","mlflow.log_figure(figure, \"Graph_\"+str(log_epoch)+'_'+str(fold+1)+'.jpg')\n","plt.clf()"],"metadata":{"id":"6JmPJukYBNz9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.cpu()\n","del model\n","gc.collect()\n","torch.cuda.empty_cache()"],"metadata":{"id":"Q28lk861BZZj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 실험실"],"metadata":{"id":"hoFBaSDeR9m7"}},{"cell_type":"code","source":["model = CatBoostRegressor()"],"metadata":{"id":"r7XuvwHNR8m0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.ge"],"metadata":{"id":"7lLNy9YDSKek"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["vision_model"],"metadata":{"id":"OSniAP-mlIHk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["vision_model = timm.create_model('vit_base_patch32_clip_448.laion2b_ft_in12k_in1k', pretrained=True, num_classes=5, exportable=True )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["b4ddd31fc8124863bc5d81c303976024","7e64e9f0724c4e9c957604349704087a","eb6a1f34279d4fd5a08444f83d1fb08a","c669489d919140b59e504c0f02246d79","77f3627fd6c946cb9dc6f1432437f0e9","31c80c0c09d74db197bdda9e773dd29e","aa2e485d5bbc4c02b01fef92e55cc964","70905a8b0e804a59ba2b0ff23babfb4e","da4d1ee1cffe4420ba66de94a40f0123","019493fdb0c649fca2e880dd8acfbae3","39387c7eb4234b89be1859f74de009b8"]},"id":"Z2erz5GegK-f","executionInfo":{"status":"ok","timestamp":1689306368359,"user_tz":-540,"elapsed":5925,"user":{"displayName":"강승준","userId":"03066468858378317540"}},"outputId":"94299951-c52d-4a8b-ed31-9cbc27815033"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading model.safetensors:   0%|          | 0.00/353M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b4ddd31fc8124863bc5d81c303976024"}},"metadata":{}}]},{"cell_type":"code","source":["node, _ =get_graph_node_names(vision_model)\n","node"],"metadata":{"id":"Nnr2DMpdg1rS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["features={'norm':'out'}\n","feature_extractor = create_feature_extractor(vision_model,return_nodes = features)\n","new_model = feature_extractor"],"metadata":{"id":"dt53FP3vhSfN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","F.gelu()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":173},"id":"727e03lOm8Ud","executionInfo":{"status":"error","timestamp":1689308090976,"user_tz":-540,"elapsed":284,"user":{"displayName":"강승준","userId":"03066468858378317540"}},"outputId":"ff0d62b8-062e-4ee9-c006-60184d1c348d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-0da6637f71d7>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: gelu() missing 1 required positional arguments: \"input\""]}]}]}